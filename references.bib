@inproceedings{Wu2008,
annote = {Beschreibt den Einsatz von Neuronalen Netzwerken zum automatisierten Erstellen von Funktionalen Testf{\"{a}}llen.},
author = {Wu, Lilan and Liu, Bo and Jin, Yi and Xie, Xiaoyao},
booktitle = {2nd International Conference on Anti-counterfeiting, Security and Identification, ASID 2008},
doi = {10.1109/IWASID.2008.4688385},
file = {:C$\backslash$:/Users/konsi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wu et al. - 2008 - Using back-propagation neural networks for functional software testing.pdf:pdf},
isbn = {1424425840},
keywords = {Back-propagation,Neural networks,Software testing},
mendeley-groups = {Neural Networks},
title = {{Using back-propagation neural networks for functional software testing}},
year = {2008}
},
@book{Franz2015,
abstract = {Web- und Mobile-Apps k{\"{o}}nnen von {\"{u}}berall im Internet aufgerufen werden. In der Regel ist nicht vorhersagbar, wie viele Personen zu welchen Zeiten mit welchen Kenntnissen und welchem Verhalten auf eine App zugreifen. Die Anzahl der Systemkonstellationen, auf der Web- und Mobile-Apps laufen k{\"{o}}nnen, ist nicht {\"{u}}berschaubar. Zudem {\"{a}}ndern sich die technischen M{\"{o}}glichkeiten in den globalen Netzwerken st{\"{a}}ndig. Fehler und M{\"{a}}ngel jeglicher Art treiben Kunden unmittelbar zu Mitbewerbern. Diese Umst{\"{a}}nde machen die Qualit{\"{a}}t einer gesch{\"{a}}ftsrelevanten Anwendung f{\"{u}}r ein Unternehmen zum kritischen Erfolgsfaktor. Der Autor beschreibt die Ma{\ss}nahmen, welche die Qualit{\"{a}}t einer Web- bzw. Mobile-App sicherstellen. Er erkl{\"{a}}rt, wie Qualit{\"{a}}t definiert und gemessen wird und erl{\"{a}}utert die notwendigen Testverfahren und deren Unterst{\"{u}}tzung durch Testsoftware. Tester, Webmaster und Entwickler erhalten mit CheckÂ­listen, Beispielen und Praxistipps das Handwerkszeug f{\"{u}}r ihre Tests. Testmanager und Projektleiter k{\"{o}}nnen Qualit{\"{a}}tsrisiken richtig bewerten und die notwendigen Qualit{\"{a}}tssicherungsma{\ss}nahmen rechtzeitig planen.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Franz, Klaus},
doi = {10.1007/978-3-662-44028-5},
eprint = {arXiv:1011.1669v3},
file = {:C$\backslash$:/Users/konsi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Franz - 2015 - Handbuch zum Testen von Web- und Mobile-Apps.pdf:pdf},
isbn = {978-3-662-44027-8},
issn = {1098-6596},
pmid = {25246403},
title = {{Handbuch zum Testen von Web- und Mobile-Apps, Springer-Verlag Berlin Heidelberg}},
year = {2015}
},
@article{Pomorova2013,
author = {Pomorova, Oksana and Hovorushchenko, Tetyana},
doi = {10.1109/EWDTS.2013.6673193},
file = {:C$\backslash$:/Users/konsi/Documents/Studium/Semester 6/SeminarAusgew{\"{a}}hlterThemen/Buecher/Artificial Neural Network for Software Quality Evaluation Based on the.pdf:pdf},
isbn = {9781479920969},
journal = {Proceedings of IEEE East-West Design and Test Symposium, EWDTS 2013},
mendeley-groups = {Neural Networks},
pages = {0--3},
title = {{Artificial neural network for software quality evaluation based on the metric analysis}},
year = {2013}
}
@article{Thwin2005,
abstract = {This paper presents the application of neural networks in software quality estimation using object-oriented metrics. Quality estimation includes estimating reliability as well as maintainability of a software. Reliability is typically measured as the number of defects. Maintenance effort can be measured as the number of lines changed per class. In this paper, two kinds of investigation are performed. The first on predicting the number of defects in a class and the second on predicting the number of lines change per class. Two neural network models are used, they are Ward neural network and General Regression neural network (GRNN). Object-oriented design metrics concerning inheritance related measures, complexity measures, cohesion measures, coupling measures and memory allocation measures are used as the independent variables. GRNN network model is found to predict more accurately than Ward network model.},
author = {Thwin, Mie Mie Thet and Quah, Tong-Seng},
doi = {10.1016/j.jss.2004.05.001},
file = {:C$\backslash$:/Users/konsi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Thwin, Quah - 2005 - Application of neural networks for software quality prediction using object-oriented metrics.pdf:pdf},
isbn = {0-7695-1905-9},
journal = {Journal of Systems and Software},
mendeley-groups = {Neural Networks},
pmid = {24686209},
title = {{Application of neural networks for software quality prediction using object-oriented metrics}},
url = {https://ieeexplore.ieee.org/document/1235412},
year = {2005}
}
@inproceedings{Peng2009,
author = {Peng, Wei and Yao, Lan and Miao, Qiang},
booktitle = {Proceedings of 2009 8th International Conference on Reliability, Maintainability and Safety, ICRMS 2009},
doi = {10.1109/ICRMS.2009.5270097},
file = {:C$\backslash$:/Users/konsi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Peng, Yao, Miao - 2009 - An approach of software quality prediction based on relationship analysis and prediction model.pdf:pdf},
isbn = {9781424449057},
keywords = {CK metrics,Fuzzy neural network,Quality attributes,Regression analysis,Software quality prediction},
mendeley-groups = {Neural Networks},
title = {{An approach of software quality prediction based on relationship analysis and prediction model}},
year = {2009}
}
@article{Rosenberg1994,
abstract = {The current NASA environment mirrors the changes taking place in the nation at large. We are required to do more for less. For software developers, the message is clear: we must understand our software processes better and manage our developments more carefully while maintaining a high degree of reliability. To this end we use a software process model and software metrics. We are interested in the ldquo;quality rdquo; of the code, its maintainability, and its potential for reuse and risk assessment. This paper describes a four-year data collection and analysis methodology called the Software Process Assessment (SPA). Measurement of the process and the software produced are the critical elements of SPA. We describe the metrics and discuss some preliminary results and applications},
author = {Rosenberg, L H and Sheppard, S B},
doi = {10.1109/METRIC.1994.344233},
file = {:C$\backslash$:/Users/konsi/Documents/Studium/Semester 6/SeminarAusgew{\"{a}}hlterThemen/Buecher/Metrics in Software Process Assessment, Quality Assurance and.pdf:pdf},
isbn = {0818658657},
journal = {Software Metrics Symposium, 1994., Proceedings of the Second International},
keywords = {NASA environment,analysis methodology,data colle},
mendeley-groups = {Neural Networks},
pages = {10--16},
title = {{Metrics in software process assessment, quality assurance and risk assessment}},
year = {1994}
}
@article{Majma2014,
abstract = {{\textcopyright} 2014 IEEE.White Box and Black Box testing are two major approaches to software testing where the former uses software source code and the latter uses software specification and focuses on testing functional requirements. In this paper, we aim to present an automated method in which a combination of White and Black Box testing is presented using Neural Networks. In order to testify the effectiveness of our proposed approach, experimental results obtained from applying our method to 6 benchmark case studies and as well as one real application from NIST SAMATE dataset are presented.},
author = {Majma, Negar and Babamir, Seyed Morteza},
doi = {10.1109/IranianCEE.2014.6999712},
file = {:C$\backslash$:/Users/konsi/Documents/Studium/Semester 6/SeminarAusgew{\"{a}}hlterThemen/Buecher/Software Test Case Generation {\&} Test Oracle Design.pdf:pdf},
isbn = {9781479944095},
journal = {22nd Iranian Conference on Electrical Engineering, ICEE 2014},
keywords = {Oracle of software,Software testing,neural networks},
mendeley-groups = {Neural Networks},
pages = {1168--1173},
title = {{Software test case generation {\&} test oracle design using neural network}},
year = {2014}
}
@article{Antinyan2018,
abstract = {BACKGROUND: Auditory processing abnormalities are frequently observed in autism spectrum disorders (ASD), and these abnormalities may have sequelae in terms of clinical language impairment (LI). The present study assessed associations between language impairment and the amplitude and latency of the superior temporal gyrus magnetic mismatch field (MMF) in response to changes in an auditory stream of tones or vowels. METHODS: Fifty-one children with ASD, and 27 neurotypical control subjects, all aged 6 to 15 years, underwent neuropsychological evaluation, including tests of language function, as well as magnetoencephalographic recording during presentation of tones and vowels. The MMF was identified in the difference waveform obtained from subtraction of responses to standard from deviant stimuli. RESULTS: Magnetic mismatch field latency was significantly prolonged (p {\textless} .001) in children with ASD, compared with neurotypical control subjects. Furthermore, this delay was most pronounced ( approximately 50 msec) in children with concomitant LI, with significant differences in latency between children with ASD with LI and those without (p {\textless} .01). Receiver operator characteristic analysis indicated a sensitivity of 82.4{\%} and specificity of 71.2{\%} for diagnosing LI based on MMF latency. CONCLUSIONS: Neural correlates of auditory change detection (the MMF) are significantly delayed in children with ASD, and especially those with concomitant LI, suggesting a neurobiological basis as well as a clinical biomarker for LI in ASD.},
author = {Antinyan, Vard and Derehag, Jesper and Sandberg, Anna and Staron, Miroslaw},
doi = {10.1109/MS.2017.3281318},
file = {:C$\backslash$:/Users/konsi/Documents/Studium/Semester{\_}6/SeminarAusgew{\"{a}}hlterThemen/Atrikel/Mythical Unit Test Coverage.pdf:pdf},
isbn = {1873-2402 (Electronic) 0006-3223 (Linking)},
issn = {07407459},
journal = {IEEE Software},
keywords = {code complexity,software development,software engineering,software metrics,software testing,test coverage,unit test},
mendeley-groups = {Neural Networks},
number = {3},
pages = {73--79},
pmid = {21392733},
publisher = {IEEE},
title = {{Mythical unit test coverage}},
year = {2018}
}
@article{Committee1998,
author = {Committee, Software {\&} Systems Engineering Standards and Others},
file = {:C$\backslash$:/Users/konsi/Documents/Studium/Semester{\_}6/SeminarAusgew{\"{a}}hlterThemen/Buecher/IEEE Standard for a Software Quality.pdf:pdf},
isbn = {1559375299},
journal = {IEEE Computer Society, Tech. Rep},
keywords = {direct metric,metrics framework,quality factor,quality subfactor,software quality},
mendeley-groups = {Neural Networks},
title = {{IEEE Std 1061-1998-IEEE Standard for a Software Quality Metrics Methodology}},
year = {1998}
}









